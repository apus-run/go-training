// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/dao/sms.go

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	model "project-layout/internal/repository/dao/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSmsDAO is a mock of SmsDAO interface.
type MockSmsDAO struct {
	ctrl     *gomock.Controller
	recorder *MockSmsDAOMockRecorder
}

// MockSmsDAOMockRecorder is the mock recorder for MockSmsDAO.
type MockSmsDAOMockRecorder struct {
	mock *MockSmsDAO
}

// NewMockSmsDAO creates a new mock instance.
func NewMockSmsDAO(ctrl *gomock.Controller) *MockSmsDAO {
	mock := &MockSmsDAO{ctrl: ctrl}
	mock.recorder = &MockSmsDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmsDAO) EXPECT() *MockSmsDAOMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSmsDAO) Delete(ctx context.Context, smsModel model.Sms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, smsModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSmsDAOMockRecorder) Delete(ctx, smsModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSmsDAO)(nil).Delete), ctx, smsModel)
}

// FindByID mocks base method.
func (m *MockSmsDAO) FindByID(ctx context.Context, id uint64) (*model.Sms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.Sms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSmsDAOMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSmsDAO)(nil).FindByID), ctx, id)
}

// FindByStatus mocks base method.
func (m *MockSmsDAO) FindByStatus(ctx context.Context, status int32) ([]model.Sms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStatus", ctx, status)
	ret0, _ := ret[0].([]model.Sms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStatus indicates an expected call of FindByStatus.
func (mr *MockSmsDAOMockRecorder) FindByStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStatus", reflect.TypeOf((*MockSmsDAO)(nil).FindByStatus), ctx, status)
}

// Insert mocks base method.
func (m *MockSmsDAO) Insert(ctx context.Context, smsModel model.Sms) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, smsModel)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockSmsDAOMockRecorder) Insert(ctx, smsModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSmsDAO)(nil).Insert), ctx, smsModel)
}

// Update mocks base method.
func (m *MockSmsDAO) Update(ctx context.Context, smsModel model.Sms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, smsModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSmsDAOMockRecorder) Update(ctx, smsModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSmsDAO)(nil).Update), ctx, smsModel)
}
