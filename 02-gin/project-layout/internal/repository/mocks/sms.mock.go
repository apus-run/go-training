// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/sms.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	entity "project-layout/internal/domain/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSMSRepository is a mock of SMSRepository interface.
type MockSMSRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSMSRepositoryMockRecorder
}

// MockSMSRepositoryMockRecorder is the mock recorder for MockSMSRepository.
type MockSMSRepositoryMockRecorder struct {
	mock *MockSMSRepository
}

// NewMockSMSRepository creates a new mock instance.
func NewMockSMSRepository(ctrl *gomock.Controller) *MockSMSRepository {
	mock := &MockSMSRepository{ctrl: ctrl}
	mock.recorder = &MockSMSRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSRepository) EXPECT() *MockSMSRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockSMSRepository) FindByID(ctx context.Context, id uint64) (*entity.Sms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Sms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSMSRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSMSRepository)(nil).FindByID), ctx, id)
}

// FindByStatus mocks base method.
func (m *MockSMSRepository) FindByStatus(ctx context.Context, status int32) ([]entity.Sms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStatus", ctx, status)
	ret0, _ := ret[0].([]entity.Sms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStatus indicates an expected call of FindByStatus.
func (mr *MockSMSRepositoryMockRecorder) FindByStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStatus", reflect.TypeOf((*MockSMSRepository)(nil).FindByStatus), ctx, status)
}

// Remove mocks base method.
func (m *MockSMSRepository) Remove(ctx context.Context, smsEntity entity.Sms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, smsEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSMSRepositoryMockRecorder) Remove(ctx, smsEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSMSRepository)(nil).Remove), ctx, smsEntity)
}

// Save mocks base method.
func (m *MockSMSRepository) Save(ctx context.Context, smsEntity entity.Sms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, smsEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSMSRepositoryMockRecorder) Save(ctx, smsEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSMSRepository)(nil).Save), ctx, smsEntity)
}
