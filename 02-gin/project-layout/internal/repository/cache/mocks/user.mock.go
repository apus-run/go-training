// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/cache/user/user.go

// Package cachemocks is a generated GoMock package.
package cachemocks

import (
	context "context"
	entity "project-layout/internal/domain/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserCache is a mock of UserCache interface.
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache.
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance.
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockUserCache) Del(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockUserCacheMockRecorder) Del(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockUserCache)(nil).Del), ctx, id)
}

// DelMany mocks base method.
func (m *MockUserCache) DelMany(ctx context.Context, keys []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelMany", ctx, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelMany indicates an expected call of DelMany.
func (mr *MockUserCacheMockRecorder) DelMany(ctx, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelMany", reflect.TypeOf((*MockUserCache)(nil).DelMany), ctx, keys)
}

// Get mocks base method.
func (m *MockUserCache) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserCache)(nil).Get), ctx, key)
}

// GetObj mocks base method.
func (m *MockUserCache) GetObj(ctx context.Context, id uint64) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObj", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObj indicates an expected call of GetObj.
func (mr *MockUserCacheMockRecorder) GetObj(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObj", reflect.TypeOf((*MockUserCache)(nil).GetObj), ctx, id)
}

// Set mocks base method.
func (m *MockUserCache) Set(ctx context.Context, key, val string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockUserCacheMockRecorder) Set(ctx, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUserCache)(nil).Set), ctx, key, val)
}

// SetOjb mocks base method.
func (m *MockUserCache) SetOjb(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOjb", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOjb indicates an expected call of SetOjb.
func (mr *MockUserCacheMockRecorder) SetOjb(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOjb", reflect.TypeOf((*MockUserCache)(nil).SetOjb), ctx, user)
}
