// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/cache/code/local.go

// Package localmocks is a generated GoMock package.
package localmocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFreecacheClient is a mock of FreecacheClient interface.
type MockFreecacheClient struct {
	ctrl     *gomock.Controller
	recorder *MockFreecacheClientMockRecorder
}

// MockFreecacheClientMockRecorder is the mock recorder for MockFreecacheClient.
type MockFreecacheClientMockRecorder struct {
	mock *MockFreecacheClient
}

// NewMockFreecacheClient creates a new mock instance.
func NewMockFreecacheClient(ctrl *gomock.Controller) *MockFreecacheClient {
	mock := &MockFreecacheClient{ctrl: ctrl}
	mock.recorder = &MockFreecacheClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreecacheClient) EXPECT() *MockFreecacheClientMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockFreecacheClient) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockFreecacheClientMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockFreecacheClient)(nil).Clear))
}

// Del mocks base method.
func (m *MockFreecacheClient) Del(key []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockFreecacheClientMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockFreecacheClient)(nil).Del), key)
}

// DelInt mocks base method.
func (m *MockFreecacheClient) DelInt(key int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelInt", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DelInt indicates an expected call of DelInt.
func (mr *MockFreecacheClientMockRecorder) DelInt(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelInt", reflect.TypeOf((*MockFreecacheClient)(nil).DelInt), key)
}

// Get mocks base method.
func (m *MockFreecacheClient) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFreecacheClientMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFreecacheClient)(nil).Get), key)
}

// GetInt mocks base method.
func (m *MockFreecacheClient) GetInt(key int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt indicates an expected call of GetInt.
func (mr *MockFreecacheClientMockRecorder) GetInt(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockFreecacheClient)(nil).GetInt), key)
}

// Set mocks base method.
func (m *MockFreecacheClient) Set(key, value []byte, expireSeconds int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expireSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockFreecacheClientMockRecorder) Set(key, value, expireSeconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockFreecacheClient)(nil).Set), key, value, expireSeconds)
}

// SetInt mocks base method.
func (m *MockFreecacheClient) SetInt(key int64, value []byte, expireSeconds int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInt", key, value, expireSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInt indicates an expected call of SetInt.
func (mr *MockFreecacheClientMockRecorder) SetInt(key, value, expireSeconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInt", reflect.TypeOf((*MockFreecacheClient)(nil).SetInt), key, value, expireSeconds)
}

// TTL mocks base method.
func (m *MockFreecacheClient) TTL(key []byte) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", key)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL.
func (mr *MockFreecacheClientMockRecorder) TTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockFreecacheClient)(nil).TTL), key)
}
