// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"project-layout/internal/infra"
	"project-layout/internal/repository"
	"project-layout/internal/repository/cache/code"
	"project-layout/internal/repository/cache/user"
	"project-layout/internal/repository/dao"
	"project-layout/internal/service"
	"project-layout/internal/service/oauth2/wechat"
	"project-layout/internal/web/handler"
	"project-layout/internal/web/handler/jwt"
	"project-layout/pkg/ginx"
	"project-layout/pkg/log"
)

// Injectors from wire.go:

// runApp init web application.
func runApp(logger *log.Logger) (*ginx.HttpServer, func(), error) {
	cmdable := infra.NewRDB()
	v := InitMiddlewares(cmdable)
	db := infra.NewDB()
	data, cleanup := infra.NewData(db, cmdable, logger)
	userDAO := dao.NewUserDAO(data)
	userCache := user.NewUserRedisCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache, logger)
	userService := service.NewUserService(userRepository, logger)
	smsService := InitSmsService()
	codeCache := code.NewRedisCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	codeService := service.NewCodeService(smsService, codeRepository)
	jwtHandler := jwt.NewJwtHandler()
	userHandler := handler.NewUserHandler(userService, codeService, jwtHandler, logger)
	wechatService := wechat.NewService()
	oAuth2WechatHandler := handler.NewOAuth2WechatHandler(wechatService, userService, jwtHandler)
	httpServer := InitWebServer(v, userHandler, oAuth2WechatHandler)
	return httpServer, func() {
		cleanup()
	}, nil
}
